{
	// Place your snippets for crystal here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Int64": {
		"prefix": "i",
		"body": [
			"Int64"
		],
		"description": "Insert Int64 predefined type"
	},
	"Read Integer": {
		"prefix": "r",
		"body": [
			"read_line.to_i64"
		],
		"description": "Read an integer from STDIN"
	},
	"Read Multiple Integers": {
		"prefix": "rs",
		"body": [
			"read_line.split.map(&.to_i64)"
		],
		"description": "Read multiple integers from STDIN"
	},
	"Insert Array of filled Array": {
		"prefix": "aaf",
		"body": [
			"Array(Array(${1})).new(${2:size}) { Array(${1}).new(${3:size}, ${4:inital_value}) }"
		],
		"description": "Insert definition of Array of Array"
	},
	"Insert Array of empty Array": {
		"prefix": "aae",
		"body": [
			"Array(Array(${1})).new(${2:size}) { [] of ${1} }"
		],
		"description": "Insert definition of Array of Array"
	},
	"Array": {
		"prefix": "a",
		"body": [
			"Array(${1})"
		],
		"description": "Insert Array predefined type"
	},
	"do-end block without argument list": {
		"prefix": "d",
		"body": [
			"do",
			"\t${1:body}",
			"end"
		],
		"description": "Insert do-end block without argument list"
	},
	"min function": {
		"prefix": "min",
		"body": [
			"@[AlwaysInline]",
			"def min(a, b)",
			"\ta < b ? a : b",
			"end"
		],
		"description": "Insert definition of min function"
	},
	"max function": {
		"prefix": "max",
		"body": [
			"@[AlwaysInline]",
			"def max(a, b)",
			"\ta > b ? a : b",
			"end"
		],
		"description": "Insert definition of max function"
	},
	"requirement of atcoder libraries": {
		"prefix": "req",
		"body": [
			"require \"./lib/atcoder/src/${1:Class}.cr\""
		],
		"description": "Insert definition of max function"
	},
	"do-end block": {
		"prefix": "do",
		"body": [
			"do |${1:arguments}|",
			"\t${2:body}",
			"end"
		],
		"description": "Insert do-end block"
	}
}